// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get amountLocked(): BigInt | null {
    let value = this.get("amountLocked");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountLocked(value: BigInt | null) {
    if (value === null) {
      this.unset("amountLocked");
    } else {
      this.set("amountLocked", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Collectible extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collectible entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collectible entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collectible", id.toString(), this);
  }

  static load(id: string): Collectible | null {
    return store.get("Collectible", id) as Collectible | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectibleId(): BigInt | null {
    let value = this.get("collectibleId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectibleId(value: BigInt | null) {
    if (value === null) {
      this.unset("collectibleId");
    } else {
      this.set("collectibleId", Value.fromBigInt(value as BigInt));
    }
  }

  get benefitor(): Bytes | null {
    let value = this.get("benefitor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set benefitor(value: Bytes | null) {
    if (value === null) {
      this.unset("benefitor");
    } else {
      this.set("benefitor", Value.fromBytes(value as Bytes));
    }
  }
}

export class Switch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Switch entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Switch entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Switch", id.toString(), this);
  }

  static load(id: string): Switch | null {
    return store.get("Switch", id) as Switch | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get executor(): Bytes {
    let value = this.get("executor");
    return value.toBytes();
  }

  set executor(value: Bytes) {
    this.set("executor", Value.fromBytes(value));
  }

  get benefitor(): Bytes {
    let value = this.get("benefitor");
    return value.toBytes();
  }

  set benefitor(value: Bytes) {
    this.set("benefitor", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get unlockTimestamp(): BigInt | null {
    let value = this.get("unlockTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unlockTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("unlockTimestamp");
    } else {
      this.set("unlockTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get isExecuted(): boolean {
    let value = this.get("isExecuted");
    return value.toBoolean();
  }

  set isExecuted(value: boolean) {
    this.set("isExecuted", Value.fromBoolean(value));
  }

  get ethersLocked(): BigInt {
    let value = this.get("ethersLocked");
    return value.toBigInt();
  }

  set ethersLocked(value: BigInt) {
    this.set("ethersLocked", Value.fromBigInt(value));
  }

  get tokensLocked(): Array<string> | null {
    let value = this.get("tokensLocked");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokensLocked(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokensLocked");
    } else {
      this.set("tokensLocked", Value.fromStringArray(value as Array<string>));
    }
  }

  get collectiblesLocked(): Array<string> | null {
    let value = this.get("collectiblesLocked");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collectiblesLocked(value: Array<string> | null) {
    if (value === null) {
      this.unset("collectiblesLocked");
    } else {
      this.set(
        "collectiblesLocked",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}
